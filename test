#!/usr/bin/env python3

from itertools import islice, chain
from digikey import Session
from digikey.category import Category
from digikey.eng import si_to_int


def init(sess_args: dict, cat_name: str) -> (Session, Category):
    d, is_new = Session.try_deserialize(**sess_args)
    if is_new:
        print('New session created')
        d.init_groups()
    else:
        print('Session restored from cache')

    cat = d.categories[cat_name]
    if not cat.params:
        cat.init_params()

    return d, cat


def search_res(cat: Category, res: str):
    prods = tuple(cat.search({
        res: {'500 Ohms'}
    }))
    print('\n'.join(sorted(str(p) for p in prods)))


def italian_res():
    sess_it = {'country': 'IT',
               'short_lang': 'it',
               'currency': 'EUR'}
    sess, cat = init(sess_it, 'Resistori/Resistori da foro passante')
    search_res(cat, 'Resistenza')
    sess.serialize()


def english_res():
    sess_en_ca = {'country': 'CA'}
    sess, cat = init(sess_en_ca, 'Resistors/Through Hole Resistors')
    search_res(cat, 'Resistance')
    sess.serialize()


def mcu():
    sess, cat = init({'country': 'CA'},
                     'Integrated Circuits (ICs)/Embedded - Microcontrollers')
    sess.serialize()

    '''
    Should be:
    https://www.digikey.ca/products/en/integrated-circuits-ics/embedded-microcontrollers/685
        ?FV=-8|685,1989|0
        &quantity=10
        &ColumnSort=1000011
        &page=1
        &stock=1
        &pageSize=500
    
    Actual:
    ... pv1989=0
    '''

    n = 2_000
    qty = 10

    all_prods = iter(cat.search({
        'Results per Page': min(500, n),
        'Part Status': {'Active'},
        'Quantity': qty,
    }))

    first = next(all_prods)
    print('\nTitles for microcontrollers:')
    print('\n'.join(f'   {k}' for k in first.attrs_by_title.keys()))
    prods = tuple(islice(chain((first,), all_prods), n))

    prods_with_prices = (
        (
            p.attrs_by_name['unitPrice'].value,
            p.attrs_by_title['Program Memory Size'].value,
            p.attrs_by_title['Number of I/O'].value,
            p.attrs_by_title['Speed'].value,
        )
        for p in prods
    )

    filtered_prods = [
        (
            price,
            si_to_int(memory, 1024),
            int(io),
            si_to_int(speed),
        )
        for price, memory, io, speed in prods_with_prices
        if (
            price
            and memory != '-'
            and io != '-'
            and speed != '-'
        )
    ]

    from pandas import DataFrame
    from seaborn import scatterplot

    frame = DataFrame(data=filtered_prods,
                      columns=('price', 'memory', 'io', 'speed'))

    plot = scatterplot(
        data=frame,
        x='speed',
        y='io',
        hue='price',
    )
    plot.set(xscale='log')
    fig = plot.get_figure()
    fig.savefig('output.png')


mcu()
